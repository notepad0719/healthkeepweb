[{"/Users/dongwoo/Downloads/healthkeep/src/reportWebVitals.js":"1","/Users/dongwoo/Downloads/healthkeep/src/App.js":"2","/Users/dongwoo/Downloads/healthkeep/src/index.js":"3","/Users/dongwoo/Downloads/healthkeep/src/inc/index.js":"4","/Users/dongwoo/Downloads/healthkeep/src/inc/header.js":"5","/Users/dongwoo/Downloads/healthkeep/src/page/main.js":"6","/Users/dongwoo/Downloads/healthkeep/src/page/write.js":"7","/Users/dongwoo/Downloads/healthkeep/src/page/right/index.js":"8","/Users/dongwoo/Downloads/healthkeep/src/page/right/right_write.js":"9","/Users/dongwoo/Downloads/healthkeep/src/page/list.js":"10","/Users/dongwoo/Downloads/healthkeep/src/page/index.js":"11","/Users/dongwoo/Downloads/healthkeep/src/page/search.js":"12","/Users/dongwoo/Downloads/healthkeep/src/page/view.js":"13","/Users/dongwoo/Downloads/healthkeep/src/page/left/category.js":"14","/Users/dongwoo/Downloads/healthkeep/src/page/left/index.js":"15","/Users/dongwoo/Downloads/healthkeep/src/inc/login.js":"16","/Users/dongwoo/Downloads/healthkeep/src/inc/back_and_close.js":"17","/Users/dongwoo/Downloads/healthkeep/src/page/signup.js":"18","/Users/dongwoo/Downloads/healthkeep/src/inc/search_pw.js":"19","/Users/dongwoo/Downloads/healthkeep/src/inc/search_id.js":"20","/Users/dongwoo/Downloads/healthkeep/src/inc/ckeditor.js":"21"},{"size":362,"mtime":1606228242077,"results":"22","hashOfConfig":"23"},{"size":11187,"mtime":1606403774281,"results":"24","hashOfConfig":"23"},{"size":635,"mtime":1606404052331,"results":"25","hashOfConfig":"23"},{"size":303,"mtime":1606398917014,"results":"26","hashOfConfig":"23"},{"size":1889,"mtime":1606403250785,"results":"27","hashOfConfig":"23"},{"size":5108,"mtime":1606388875539,"results":"28","hashOfConfig":"23"},{"size":889,"mtime":1606398861986,"results":"29","hashOfConfig":"23"},{"size":55,"mtime":1606396691711,"results":"30","hashOfConfig":"23"},{"size":2831,"mtime":1606388822513,"results":"31","hashOfConfig":"23"},{"size":2290,"mtime":1606393397779,"results":"32","hashOfConfig":"23"},{"size":261,"mtime":1606388836114,"results":"33","hashOfConfig":"23"},{"size":549,"mtime":1606388886968,"results":"34","hashOfConfig":"23"},{"size":14567,"mtime":1606388925023,"results":"35","hashOfConfig":"23"},{"size":4575,"mtime":1606401836361,"results":"36","hashOfConfig":"23"},{"size":49,"mtime":1606388794917,"results":"37","hashOfConfig":"23"},{"size":4251,"mtime":1606388720675,"results":"38","hashOfConfig":"23"},{"size":1325,"mtime":1606388641797,"results":"39","hashOfConfig":"23"},{"size":5173,"mtime":1606390296162,"results":"40","hashOfConfig":"23"},{"size":6470,"mtime":1606388763096,"results":"41","hashOfConfig":"23"},{"size":4808,"mtime":1606388738681,"results":"42","hashOfConfig":"23"},{"size":668,"mtime":1606406567609,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"chlfzv",{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dongwoo/Downloads/healthkeep/src/reportWebVitals.js",[],["101","102"],"/Users/dongwoo/Downloads/healthkeep/src/App.js",["103","104","105"],"import React, { Component } from 'react';\nimport './App.css';\n\nimport { Head } from './inc'\nimport { Main } from './page/index.js'\n\nimport axios from 'axios';\nimport queryString from 'query-string';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      login: false,\n      admin: false,\n      user_ip: \"\",\n      signup: false,\n      login_modal: false,\n      list_data: [],\n      list_page: 1,\n      list_limit: 10,\n      list_all_page: [],\n      list_search: \"\",\n      category: \"\",\n      user_id: \"\",\n      data: \"\",\n      date: \"\",\n      like_num: 0,\n      like_exist: null,\n      like_num: \"\",\n      pre_view: \"\",\n      next_view: \"\",\n      category_data: [],\n      select_category: \"\",\n      reply_data: [],\n      reply_num: null,\n      reply_all_page: [],\n      reply_page: 1,\n      reply_limit: 2,\n      reply_block: 1,\n      reply_pre_block: false,\n      reply_next_block: false,\n      reply_block_limit: 10\n    }\n  }\n\n  componentDidMount() {\n    this._getListData();\n    this._getAllCategoryData();\n\n    if (sessionStorage.login && sessionStorage.IP) {\n      this.setState({\n        login: JSON.parse(sessionStorage.login).id,\n        admin: JSON.parse(sessionStorage.login).admin,\n        user_ip: JSON.parse(sessionStorage.IP),\n        user_id: JSON.parse(sessionStorage.login).user_id,\n      })\n    }\n\n    if (sessionStorage.reply) {\n      this._setReplyPage()\n    }\n  }\n\n  _getAllLike = async (board_id) => {\n    const getData = await axios('/get/board_data', {\n      method: 'POST',\n      headers: new Headers(),\n      data: { id: board_id }\n    });\n\n    this.setState({ like_num: getData.data[0].likes })\n  }\n\n  _getData = async (board_id) => {\n    const getData = await axios('/get/board_data', {\n      method: 'POST',\n      headers: new Headers(),\n      data: { id: board_id }\n    });\n\n    // 날짜 구하기\n    const date = getData.data[0].date.slice(0, 10) + ' ' + getData.data[0].date.slice(11, 16);\n\n    return this.setState({ data: getData, date: date, like_num: getData.data[0].likes })\n  }\n\n  _setPage = function () {\n    if (sessionStorage.page) {\n      this.setState({ list_page: Number(sessionStorage.page) })\n      return Number(sessionStorage.page);\n    }\n\n    this.setState({ list_page: 1 })\n    return 1;\n  }\n\n  _setReplyPage = function () {\n    if (sessionStorage.reply) {\n      // 댓글\n      const reply = JSON.parse(sessionStorage.reply);\n\n      this.setState({\n        reply_page: Number(reply.reply_page)\n      })\n\n      return this._getAllPage(reply.board_id)\n    }\n  }\n\n  _changePage = (el, board_id) => {\n    if (board_id === undefined) {\n      // 게시글 형태에서\n      this.setState({ list_page: el })\n      sessionStorage.setItem('page', el);\n\n      return this._getListData();\n\n    } else {\n      // 댓글 형태에서\n      this.setState({ reply_page: el })\n      const reply_session = { reply_page: el, board_id: board_id }\n      sessionStorage.setItem('reply', JSON.stringify(reply_session));\n\n      return this._getReplyData(board_id);\n    }\n  }\n\n  _getListData = async function () {\n    const { list_limit } = this.state;\n    const list_pages = this._setPage();\n\n    let categorys = '';\n    if (sessionStorage.getItem('category')) {\n      categorys = sessionStorage.getItem('category')\n    }\n\n    let search = \"\";\n    if (queryString.parse(this.props.location.search)) {\n      search = queryString.parse(this.props.location.search).search;\n    }\n\n    // Board 테이블 데이터 전체 수\n    const total_cnt = await axios('/get/board_cnt', {\n      method: 'POST',\n      headers: new Headers(),\n      data: { search: search, category: categorys }\n    });\n\n    // 데이터 가져오기\n    const total_list = await axios('/get/board', {\n      method: 'POST',\n      headers: new Headers(),\n      data: {\n        limit: list_limit,\n        page: list_pages,\n        search: search,\n        category: categorys\n      }\n    })\n\n    // 전체 페이지 수 구하기\n    let page_arr = [];\n\n    for (let i = 1; i <= Math.ceil(total_cnt.data.cnt / list_limit); i++) {\n      page_arr.push(i);\n    }\n\n    this.setState({\n      list_data: JSON.stringify(total_list.data),\n      list_all_page: page_arr,\n      list_search: search\n    })\n  }\n\n  _login = (data) => {\n    sessionStorage.setItem('login', JSON.stringify(data.suc))\n    sessionStorage.setItem('IP', JSON.stringify(data.ip))\n\n    this.setState({\n      login: JSON.parse(sessionStorage.login).id,\n      admin: JSON.stringify(data.suc).admin,\n      user_ip: JSON.parse(sessionStorage.IP),\n      user_id: JSON.parse(sessionStorage.login).user_id\n    })\n    return window.location.reload()\n  }\n\n  _logout = () => {\n    this.setState({ login: false, admin: false, user_ip: \"\" })\n\n    sessionStorage.removeItem('login')\n    sessionStorage.removeItem('IP')\n  }\n\n  _toggleModal = (boolean) => {\n    this.setState({ login_modal: boolean })\n  }\n\n  // 카테고리 변동\n  _changeCatgory = (target) => {\n    sessionStorage.setItem('category', target);\n    return window.location.href = '/';\n  }\n\n  _getPreAndNextData = async (board_id) => {\n    const category = sessionStorage.getItem('category');\n\n    const res = await axios('/get/pre_and_next', {\n      method: 'POST',\n      headers: new Headers(),\n      data: { board_id: board_id, category: category }\n    })\n\n    this.setState({\n      pre_view: res.data.pre,\n      next_view: res.data.next\n    })\n  }\n\n  _getAllCategoryData = async function () {\n    const getData = await axios('/get/category');\n\n    this.setState({ category_data: getData.data })\n  }\n\n  _selectCategoryData = async (board_id) => {\n    let category = document.getElementsByName('select_category')[0].value;\n\n    if (board_id) {\n      // 수정 페이지일 경우 카테고리 변경\n      const getData = await axios('/get/board_data', {\n        method: 'POST',\n        headers: new Headers(),\n        data: { id: board_id }\n      });\n\n      return this.setState({ select_category: getData.data[0].cat_id })\n    }\n\n    this.setState({\n      select_category: category\n    })\n  }\n\n  // like 여부 확인\n  _getLikeExist = (boo) => {\n    this.setState({ like_exist: boo })\n  }\n\n  _getReplyData = async (board_id) => {\n\n    var reply_page = 1;\n    if (sessionStorage.getItem('reply')) {\n      reply_page = JSON.parse(sessionStorage.getItem('reply')).reply_page\n\n    } else {\n      reply_page = this.state.reply_page\n    }\n\n    // 한 페이지에 불러올 댓글의 갯수 설정\n    const { reply_limit } = this.state;\n\n    const obj = {\n      board_id: board_id,\n      reply_page: Number(reply_page),\n      reply_limit: reply_limit\n    }\n\n    // 데이터와 총 갯수 구하기\n    const data = await axios('/get/reply_data', {\n      method: 'POST',\n      headers: new Headers(),\n      data: obj\n    })\n\n    // 페이징 정보 구해오기\n    const page_data = this._getAllPage(data.data.count)\n\n    return this.setState({\n      reply_data: data.data.rows,\n      reply_num: data.data.count,\n      reply_all_page: page_data.page_arr\n    })\n  }\n\n  _getAllPage = function (cnt) {\n    let result = new Object;\n\n    // 전체 페이지 수 구하기\n    let page_arr = [];\n\n    const { reply_limit, reply_block_limit } = this.state;\n\n    // 현재 페이지 구하기\n    let reply_page = 1;\n    if (sessionStorage.getItem('reply')) {\n      reply_page = JSON.parse(sessionStorage.getItem('reply')).reply_page\n\n    } else {\n      reply_page = this.state.reply_page\n    }\n\n    // 블록 최대 범위 (소수점 포함)\n    const max_block = (Math.ceil(cnt / reply_limit)) / reply_block_limit;\n\n    // 현재 페이지 위치를 블록 단위로 변환\n    const block_point = Math.ceil(reply_page / reply_block_limit);\n    this.setState({ reply_block: block_point, reply_page: reply_page })\n\n    // 다음 블록이 있는지 판단\n    if (block_point < max_block) {\n      this.setState({ reply_next_block: true })\n\n    } else {\n      this.setState({ reply_next_block: false })\n    }\n\n    // 이전 블록이 있는지 판단\n    if (block_point > 1) {\n      this.setState({ reply_pre_block: true })\n\n    } else {\n      this.setState({ reply_pre_block: false })\n    }\n\n    let start = block_point;\n    if (start !== 1) {\n      start = ((start - 1) * reply_block_limit) + 1;\n    }\n\n    let end = Math.ceil(cnt / reply_limit);\n    if (end > reply_block_limit) {\n      end = (start + reply_block_limit) - 1;\n\n      if (end > (max_block * 10)) {\n        end = max_block * 10\n      }\n    }\n\n    for (start; start <= end; start++) {\n      page_arr.push(start);\n    }\n\n    result['page_arr'] = page_arr;\n    return result;\n  }\n\n  _changeBlock = (reply_page, board_id) => {\n    const reply_session = { reply_page: reply_page, board_id: board_id }\n    sessionStorage.setItem('reply', JSON.stringify(reply_session));\n\n\n    return this._getReplyData(board_id)\n  }\n\n  render() {\n    const {\n      login, admin, user_ip, login_modal,\n      list_data, list_all_page, list_search, list_page, user_id,\n      data, date, like_num, like_exist, pre_view, next_view,\n      category_data, select_category, reply_data, reply_num,\n      reply_all_page, reply_page, replt_limit,\n      reply_pre_block, reply_next_block, reply_block, reply_block_limit\n    } = this.state;\n\n    const {\n      _login, _logout, _toggleModal, _getSearch, _changePage,\n      _changeCatgory, _getData, _getAllLike, _getPreAndNextData,\n      _selectCategoryData, _getLikeExist, _getReplyData\n    } = this;\n\n\n    return (\n      <div>\n        <div>\n          <Head\n            login={login}\n            admin={admin}\n            user_ip={user_ip}\n            _login={_login}\n            _logout={_logout}\n            login_modal={login_modal}\n            _toggleModal={_toggleModal}\n          />\n        </div>\n\n        <div>\n          <Main\n            admin={admin}\n            user_ip={user_ip}\n            login={login}\n            login_modal={login_modal}\n            _toggleModal={_toggleModal}\n            _getSearch={_getSearch}\n            list_data={list_data}\n            list_all_page={list_all_page}\n            list_search={list_search}\n            list_page={list_page}\n            _changePage={_changePage}\n            _changeCatgory={_changeCatgory}\n            user_id={user_id}\n            data={data}\n            date={date}\n            like_num={like_num}\n            _getData={_getData}\n            _getAllLike={_getAllLike}\n            pre_view={pre_view}\n            next_view={next_view}\n            _getPreAndNextData={_getPreAndNextData}\n            category_data={category_data}\n            select_category={select_category}\n            _selectCategoryData={_selectCategoryData}\n            _getLikeExist={_getLikeExist}\n            like_exist={like_exist}\n            reply_data={reply_data}\n            reply_num={reply_num}\n            _getReplyData={_getReplyData}\n            reply_all_page={reply_all_page}\n            reply_page={reply_page}\n            replt_limit={replt_limit}\n            reply_pre_block={reply_pre_block}\n            reply_next_block={reply_next_block}\n            reply_block={reply_block}\n            reply_block_limit={reply_block_limit}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","/Users/dongwoo/Downloads/healthkeep/src/index.js",[],["106","107"],"/Users/dongwoo/Downloads/healthkeep/src/inc/index.js",[],"/Users/dongwoo/Downloads/healthkeep/src/inc/header.js",[],"/Users/dongwoo/Downloads/healthkeep/src/page/main.js",[],"/Users/dongwoo/Downloads/healthkeep/src/page/write.js",["108"],"import React, { Component } from 'react';\nimport './main.css';\n\nimport { CKEditor } from '../inc/index.js';\n\nclass write extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.data && this.props.title.length === 0) {\n      this.props._getModifyData(this.props.match.params.data);\n    }\n  }\n\n  render() {\n    const {\n      _getContents, _getTitles, contents, title\n    } = this.props;\n\n    return (\n      <div className='Write'>\n        <div id='Title'>\n          <input type='text' autoComplete='off' id='title_txt' name='title' placeholder='제목'\n            defaultValue={title} onBlur={() => _getTitles()}\n          />\n        </div>\n\n        <div>\n          <CKEditor\n            _getContents={_getContents}\n            contents={contents}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default write;\n",["109","110"],"/Users/dongwoo/Downloads/healthkeep/src/page/right/index.js",[],"/Users/dongwoo/Downloads/healthkeep/src/page/right/right_write.js",[],"/Users/dongwoo/Downloads/healthkeep/src/page/list.js",[],["111","112"],"/Users/dongwoo/Downloads/healthkeep/src/page/index.js",[],"/Users/dongwoo/Downloads/healthkeep/src/page/search.js",["113"],"/Users/dongwoo/Downloads/healthkeep/src/page/view.js",["114","115","116","117","118","119","120"],"import React, { Component } from 'react';\nimport './main.css';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nclass view extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      none_like: 'https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2013/png/iconmonstr-thumb-10.png&r=171&g=171&b=171',\n      like: 'https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2013/png/iconmonstr-thumb-10.png&r=171&g=53&b=53',\n      pre: \"https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2018/png/iconmonstr-angel-left-thin.png&r=0&g=0&b=0\",\n      next: \"https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2018/png/iconmonstr-angel-right-thin.png&r=0&g=0&b=0\",\n      pre_block: \"https://cdns.iconmonstr.com/wp-content/assets/preview/2017/240/iconmonstr-arrow-64.png\",\n      next_block: \"https://cdns.iconmonstr.com/wp-content/assets/preview/2017/240/iconmonstr-arrow-63.png\"\n    }\n  }\n\n  componentDidMount() {\n    const board_id = this.props.match.params.data;\n\n    const {\n      pre_view, next_view, _getPreAndNextData, like_exist,\n      reply_num, _getReplyData\n    } = this.props;\n\n    this._addViewCnt(board_id);\n\n    if (reply_num === null) {\n      _getReplyData(board_id)\n    }\n\n    if (!this.props.data) {\n      this.props._getData(board_id)\n    }\n\n    if (like_exist === null) {\n      this._getLikeInfo()\n    }\n\n    if (pre_view === \"\" || next_view === \"\") {\n      _getPreAndNextData(board_id)\n    }\n\n    if (sessionStorage.getItem('reply')) {\n      const reply_session = JSON.parse(sessionStorage.getItem('reply'))\n\n      if (reply_session.board_id !== board_id) {\n        sessionStorage.removeItem('reply')\n        _getReplyData(board_id)\n      }\n    }\n  }\n\n  _getLikeInfo = async function () {\n    const { user_id, login, _getLikeExist } = this.props;\n\n    if (login) {\n      // 로그인 된 상태에서만 실행\n\n      const board_id = this.props.match.params.data;\n      const obj = { user_id: user_id, board_id: board_id }\n\n      const getData = await axios('/check/like', {\n        method: 'POST',\n        headers: new Headers(),\n        data: obj\n      })\n\n      if (getData.data[0]) {\n        return _getLikeExist(true)\n      }\n      _getLikeExist(false)\n    }\n  };\n\n  _addViewCnt = async function (board_id) {\n    await axios('/update/view_cnt', {\n      method: 'POST',\n      headers: new Headers(),\n      data: { id: board_id }\n    })\n  }\n\n  _toggleLike = async function () {\n    const {\n      user_id, _getAllLike\n    } = this.props;\n\n    if (!this._loginCheck()) {\n      return\n    }\n\n    const board_id = this.props.match.params.data;\n    const obj = { type: 'add', user_id: user_id, board_id: board_id }\n\n    const res = await axios('/update/like', {\n      method: 'POST',\n      headers: new Headers(),\n      data: obj\n    })\n\n    if (!res.data) {\n      if (window.confirm('좋아요를 취소하시겠습니까?')) {\n        const cancel = { type: 'remove', user_id: user_id, board_id: board_id }\n\n        await axios('/update/like', {\n          method: 'POST',\n          headers: new Headers(),\n          data: cancel\n        })\n\n        this.props._getLikeExist(false)\n        //this._getAllLike('remove')\n        _getAllLike(board_id)\n\n        alert('좋아요가 취소되었습니다.');\n      }\n\n    } else {\n      this.props._getLikeExist(true)\n      //this._getAllLike('add')\n      _getAllLike(board_id)\n\n      alert('해당 게시물에 좋아요를 누르셨습니다.')\n    }\n  }\n\n  _changeViewPage = function (url) {\n    if (url === 'null_pre') {\n      return alert('첫번째 게시물입니다.')\n\n    } else if (url === 'null_next') {\n      return alert('마지막 게시물입니다.')\n    }\n\n    return window.location.href = url;\n  }\n\n  _removeView = async function () {\n    if (window.confirm('해당 게시물을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n      const board_id = this.props.match.params.data;\n\n      await axios('/delete/board', {\n        method: 'POST',\n        headers: new Headers(),\n        data: { board_id: board_id }\n      })\n\n      alert('게시물이 삭제되었습니다.')\n      return window.location.href = '/'\n    }\n  }\n\n  _loginCheck = () => {\n    const {\n      login, _toggleModal\n    } = this.props;\n\n    if (!login) {\n      alert('로그인이 필요합니다.');\n      _toggleModal(true)\n\n      return false;\n    }\n\n    return true;\n  }\n\n  _addReply = async () => {\n    let reply = document.getElementsByName('write_reply')[0].value.trim();\n\n    // 내용 줄바꿈 처리하기\n    reply = reply.replace(/(\\n|\\r\\n)/g, '<br>');\n\n    const board_id = this.props.match.params.data;\n    const { user_id } = this.props;\n\n    if (!this._loginCheck()) {\n      return\n    }\n\n    if (reply === \"\" || reply.length === 0) {\n      document.getElementsByName('write_reply')[0].focus()\n      document.getElementsByName('write_reply')[0].value = reply;\n\n      return alert('댓글을 입력해주세요.');\n\n    } else if (reply.split('<br>').length > 5) {\n      return alert('댓글 내용이 5줄 이상 초과되었습니다.')\n    }\n\n    const data = {\n      board_id: board_id,\n      contents: reply,\n      user_id: user_id\n    }\n\n    await axios('/add/reply', {\n      method: 'POST',\n      headers: new Headers(),\n      data: data\n    })\n\n    alert('댓글이 등록되었습니다.')\n    return window.location.reload();\n  }\n\n  _getUserInfo = async function (user_id) {\n    const data = await axios('/get/user_info', {\n      method: 'POST',\n      headers: new Headers(),\n      data: { user_id: user_id }\n    })\n\n    return data.data[0];\n  }\n\n  _removeReply = async function (reply_id) {\n\n    if (window.confirm('해당 댓글을 삭제하시겠습니까?')) {\n      await axios('/delete/reply', {\n        method: 'POST',\n        headers: new Headers(),\n        data: { reply_id: reply_id }\n      })\n    }\n\n    alert('댓글 삭제가 완료되었습니다.')\n    return window.location.reload();\n  }\n\n  _changeBlock = (type) => {\n    const {\n      reply_pre_block, reply_next_block,\n      reply_block_limit, reply_block, _getReplyData\n    } = this.props;\n\n    const board_id = this.props.match.params.data;\n    let reply_session = new Object\n    let reply_page = this.props.reply_page;\n\n    if (type === 'pre') {\n      if (reply_pre_block) {\n        if (reply_block === 2) {\n          reply_session = { reply_page: 10, board_id: board_id }\n\n        } else {\n          reply_page = (reply_block * reply_block_limit) - 1;\n          reply_session = { reply_page: reply_page, board_id: board_id }\n        }\n      } else {\n        return alert('첫번째 블록입니다.')\n      }\n\n    } else if (type === 'next') {\n      if (reply_next_block) {\n        reply_page = (reply_block * reply_block_limit) + 1;\n        reply_session = { reply_page: reply_page, board_id: board_id }\n\n      } else {\n        return alert('마지막 블록입니다.')\n      }\n    }\n\n    sessionStorage.setItem('reply', JSON.stringify(reply_session));\n    return _getReplyData(board_id)\n  }\n\n  render() {\n    const {\n      none_like, like, pre, next, pre_block, next_block\n    } = this.state;\n\n    const {\n      data, date, like_num, pre_view, next_view, admin,\n      like_exist, reply_num, reply_data, reply_all_page, reply_page,\n      _changePage\n    } = this.props\n\n\n    const { _loginCheck, _addReply, _changeBlock } = this;\n\n    // 해당 게시물의 id 값\n    const board_id = this.props.match.params.data;\n\n    if (next_view.length) {\n      var next_url = '/view/' + next_view[0].board_id;\n    }\n\n    if (pre_view.length) {\n      var pre_url = '/view/' + pre_view[0].board_id;\n    }\n\n    if (data.data) {\n      var modify_url = '/write/modify/' + data.data[0].board_id;\n    }\n\n    return (\n      <div className='Write View'>\n        {data.data\n          ? <div>\n            {admin === 'Y'\n              ?\n              <div className='write_option_div'>\n                <Link to={modify_url}> <input type='button' value='수정' /> </Link>\n                <input type='button' value='삭제' onClick={() => this._removeView()} />\n              </div>\n              : null}\n\n            <div className='top_title'>\n              <input type='text' id='title_txt' name='title' defaultValue={data.data[0].title} readOnly />\n\n              <div className='date_div'>\n                {date}\n              </div>\n            </div>\n\n            <div id='contents_div'\n              dangerouslySetInnerHTML={{ __html: data.data[0].contents }}\n            >\n            </div>\n\n            <div className='other_div'>\n              <input type='button' value='목록' id='view_list_button'\n                onClick={() => window.location.href = '/'}\n              />\n\n              <div className='view_pre_next_div view_pre'>\n                {/* left empty */}\n                <p> 이전글 </p>\n\n                <img src={pre} onClick={\n                  pre_url\n                    ? () => this._changeViewPage(pre_url)\n                    : () => this._changeViewPage('null_pre')} />\n\n                <div>\n                  {pre_view.length > 0\n                    ? <b onClick={() => this._changeViewPage(pre_url)}>\n                      {pre_view[0].title}\n                    </b>\n                    : <p> 첫번째 글입니다. </p>}\n                </div>\n\n              </div>\n\n              <div className='Like'>\n                <img src={!like_exist ? none_like : like} onClick={() => this._toggleLike()} />\n                <h5> 좋아요 ( {like_num} ) </h5>\n              </div>\n\n              <div className='view_pre_next_div view_next'>\n                {/* right empty */}\n                <p> 다음글 </p>\n\n                <img src={next} onClick={\n                  next_url\n                    ? () => this._changeViewPage(next_url)\n                    : () => this._changeViewPage('null_next')} />\n\n                <div>\n                  {next_view.length > 0\n                    ? <b onClick={() => this._changeViewPage(next_url)}>\n                      {next_view[0].title}\n                    </b>\n                    : <p> 마지막 글입니다. </p>}\n                </div>\n              </div>\n            </div>\n            {/* other_div className 끝 */}\n\n            <div className='Reply_div'>\n              <h4> 댓글 </h4>\n\n              <div className='Reply_write'>\n                <textarea rows='3' placeholder='100자 이내의 글을 입력해주세요.'\n                  maxLength='100' name='write_reply' onClick={() => _loginCheck()}\n                >\n                </textarea>\n\n                <input type='button' value='등록' id='reply_submit_button'\n                  onClick={() => _addReply()}\n                />\n              </div>\n\n              <div className='Reply_list'>\n                {reply_data.length > 0 && reply_num > 0\n                  ? <div>\n                    <h5> {reply_num} 개의 댓글이 있습니다. </h5>\n\n                    <div className='reply_list_div'>\n                      {reply_data.map((el) => {\n\n                        let id = el.user.id;\n                        if (el.user.admin === 'Y') {\n                          id = '관리자'\n                        }\n\n                        let date = el.date.slice(2, 10) + ' ' + el.date.slice(11, 16);\n\n                        return (\n                          <div className='reply_list_gird'>\n                            <div style={el.user.admin === 'Y' ? { 'fontWeight': 'bold' } : null}\n                              className='reply_list_id'\n                            >\n                              {/* 아이디 */}\n                              {id}\n                            </div>\n\n                            <div\n                              className='reply_list_contents'\n                              dangerouslySetInnerHTML={{ __html: el.contents }}>\n                              {/* 내용 */}\n                            </div>\n\n                            <div className='reply_list_date'>\n                              {/* 작성일 및 기타 */}\n                              {date}\n\n                              {(this.props.login && this.props.login === el.user.id) || this.props.admin === 'Y'\n                                ? <input type='button' value='삭제' className='reply_delete_btn'\n                                  onClick={() => this._removeReply(el.reply_id)}\n                                />\n                                : null}\n                            </div>\n                          </div>\n                        )\n                      })}\n                    </div>\n                    {/* reply_list_div 끝 */}\n\n                    <div className='reply_paging'>\n                      {/* 댓글 페이징 시작 */}\n                      <div>\n                        {reply_all_page ?\n                          <ul>\n                            <li className='page_num'>\n                              <img id='pre_block' src={pre_block}\n                                onClick={() => _changeBlock('pre')}\n                              />\n                            </li>\n\n                            {reply_all_page.map((el, key) => {\n                              return (\n                                el === reply_page ?\n                                  /* 현재 페이지 */\n                                  <li key={key} className='page_num'>\n                                    <b> {el} </b>\n                                  </li>\n\n                                  : <li key={key} className='page_num'\n                                    onClick={() => _changePage(el, board_id)}\n                                  >\n                                    {el}\n                                  </li>\n                              )\n                            })\n                            }\n                            <li className='page_num'>\n                              <img id='next_block' src={next_block}\n                                onClick={() => _changeBlock('next')}\n                              />\n                            </li>\n                          </ul>\n                          : null}\n                      </div>\n\n                    </div> {/* 댓글 페이징 끝 */}\n                  </div>\n\n                  : <h5> 작성된 댓글이 없습니다. </h5>}\n              </div>\n            </div> {/* Reply_div 끝 */}\n          </div>\n\n          : null}\n      </div>\n    );\n  }\n}\n\nexport default view;\n","/Users/dongwoo/Downloads/healthkeep/src/page/left/category.js",["121","122"],"import React, { Component } from 'react';\nimport '../main.css';\n\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass category extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      category: [],\n      edit: false,\n    }\n  }\n\n  componentDidMount() {\n    this._getCategoryData();\n  }\n\n  _getCategoryData = async function () {\n    const getData = await axios('/get/category');\n\n    this.setState({ category: getData.data })\n  }\n\n  _addCategory = async function () {\n    let category_name = window.prompt('추가할 카테고리의 이름을 입력해주세요.');\n\n    if (category_name) {\n      category_name = category_name.trim();\n\n      if (category_name !== '' && category_name.length > 0) {\n        const add = await axios('/add/category', {\n          method: 'POST',\n          data: { name: category_name },\n          headers: new Headers()\n        })\n\n        alert(add.data.msg);\n        this._getCategoryData();\n\n      } else {\n        return alert('최소 1글자 이상 입력해야 합니다.');\n      }\n    }\n  }\n\n  _removeCategory = async function (category) {\n    if (window.confirm(category.name + ' 카테고리를 삭제하시겠습니까?')) {\n\n      const remove = await axios('/delete/category', {\n        method: 'POST',\n        data: category,\n        headers: new Headers()\n      })\n\n      if (remove) {\n        alert('카테고리 삭제가 완료되었습니다.');\n        this._getCategoryData();\n      }\n    }\n  }\n\n  _modifyCategory = async function (category) {\n    let modify_name = document.getElementsByName('modify_' + category.id)[0].value;\n    modify_name = modify_name.trim();\n\n    if (modify_name !== '' && modify_name.length > 0) {\n      if (category.name === modify_name) {\n        return alert('변경하려는 카테고리의 이름이 \\n기존의 카테고리명과 동일합니다.');\n      }\n\n      if (window.confirm(category.name + ' 의 이름을 \\n' + modify_name + ' 으로 수정하시겠습니까?')) {\n\n        const data = { id: category.id, name: modify_name }\n        const modfy = await axios('/modify/category', {\n          method: 'POST',\n          data: data,\n          headers: new Headers()\n        })\n\n        alert(modfy.data.msg);\n        this._getCategoryData();\n      }\n\n    } else {\n      return alert('변경할 카테고리의 이름을 최소 1 글자 이상 입력해주세요.');\n    }\n  }\n\n  render() {\n    const { category, edit } = this.state;\n    const { _changeCatgory, login, admin } = this.props;\n\n    let pre_cat = '';\n    if (sessionStorage.getItem('category')) {\n      pre_cat = Number(sessionStorage.getItem('category'));\n    }\n\n    return (\n      <div className='Category'>\n        <ul>\n          <li>\n            <Link className={pre_cat === '' ? \"pre_cat\" : null} to='/' onClick={() => _changeCatgory('')}>\n              전체 보기\n              </Link>\n            {login && admin === 'Y'\n              ? !edit ? <input type='button' value='Edit' className='Edit' onClick={() => this.setState({ edit: !edit })} />\n                : <input type='button' value='Add' className='Edit' onClick={() => this._addCategory()} />\n\n              : null}\n            <hr />\n          </li>\n          {category.length > 0 ?\n            category.map((el, key) => {\n              if (!edit) {\n                return (\n                  <li key={key}>\n                    <Link className={pre_cat === el.id ? \"pre_cat\" : null} to='/' onClick={() => _changeCatgory(el.id)}>\n                      {el.name}\n                    </Link>\n                  </li>\n                )\n              } else {\n                return (\n                  <li key={key}>\n                    <img\n                      src='https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2012/png/iconmonstr-x-mark-2.png&r=0&g=0&b=0'\n                      className='remove_icon'\n                      onClick={() => this._removeCategory(el)}\n                    />\n                    <input type='text' maxLength='20' className='edit_input' name={'modify_' + el.id} defaultValue={el.name} />\n                    <img\n                      src='https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2017/png/iconmonstr-check-mark-17.png&r=0&g=0&b=0'\n                      className='modify_icon'\n                      onClick={() => this._modifyCategory(el)}\n                    />\n                  </li>\n                )\n              }\n            })\n            : null}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default category;\n","/Users/dongwoo/Downloads/healthkeep/src/page/left/index.js",[],"/Users/dongwoo/Downloads/healthkeep/src/inc/login.js",["123","124","125"],"import React, { Component } from 'react';\n\nimport Modal from 'react-awesome-modal';\nimport axios from 'axios';\n\nimport { Search_id, Search_pw } from './index.js';\n\nclass login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      password: \"\",\n      search_id_modal: false,\n      search_pw_modal: false,\n      close: \"https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2012/png/iconmonstr-x-mark-2.png&r=0&g=0&b=0\",\n    }\n  }\n\n  _changeID = function () {\n    const id_v = document.getElementsByName('id')[0].value;\n\n    this.setState({\n      id: id_v\n    });\n  }\n\n  _changePW = function () {\n    const pw_v = document.getElementsByName('password')[0].value;\n\n    this.setState({\n      password: pw_v\n    });\n  }\n\n  _selectUserData = async (e) => {\n    const id = this.state.id.trim();\n    const password = this.state.password.trim();\n\n    if (id === \"\") {\n      return alert('아이디를 입력해주세요.');\n\n    } else if (password === \"\") {\n      return alert('비밀번호를 입력해주세요.');\n    }\n\n    const obj = { id: id, password: password }\n    const res = await axios('/send/pw', {\n      method: 'POST',\n      data: obj,\n      headers: new Headers()\n    })\n\n    if (res.data) {\n\n      if (res.data.suc) {\n\n        this.props._login(res.data);\n        this.props._toggleModal(false)\n\n        return alert('로그인 되었습니다.')\n\n      } else {\n        return alert('아이디 및 비밀번호가 일치하지 않습니다.');\n      }\n    }\n  }\n\n  _openSearchModal = function (target) {\n\n    if (target === 'id') {\n      this.setState({ search_id_modal: true })\n\n    } else if (target === 'pw') {\n      this.setState({ search_pw_modal: true })\n    }\n\n    return this.props._toggleModal(false)\n  }\n\n  _closeSearchModal = (target) => {\n\n    if (target === 'id') {\n      this.setState({ search_id_modal: false })\n\n    } else if (target === 'pw') {\n      this.setState({ search_pw_modal: false })\n    }\n  }\n\n  _backSearchModal = (target) => {\n\n    this._closeSearchModal(target)\n    return this.props._toggleModal(true)\n  }\n\n  render() {\n    const { close } = this.state;\n\n    return (\n      <div>\n        <Modal visible={this.props.login_modal}\n          width=\"400\" height=\"400\"\n          effect=\"fadeInDown\"\n          onClickAway={() => this.props._toggleModal(false)}\n        >\n          <div>\n            <h4 className='acenter login_tit'> 로그인 </h4>\n            <img src={close} id='login_close' title='닫기' onClick={() => this.props._toggleModal(false)} />\n            <form>\n              <div className='login_div'>\n                <div className='login_input_div'>\n                  <p> ID </p>\n                  <input type='text' name='id' onChange={() => this._changeID()} autoComplete=\"off\" />\n                </div>\n\n                <div className='login_input_div' style={{ 'marginTop': '40px' }}>\n                  <p> Password </p>\n                  <input type='password' name='password' onChange={() => this._changePW()} />\n                </div>\n\n                <div className='submit_div'>\n                  <b id='login_button' onClick={() => this._selectUserData()}> 로그인 </b>\n                </div>\n              </div>\n            </form>\n\n            <div className='search_user_info_div'>\n              <div>\n                <b style={{ 'marginLeft': '15px' }}\n                  onClick={() => this._openSearchModal('id')}\n                >\n                  아이디 찾기\n                        </b>\n              </div>\n\n              <div>\n                <b onClick={() => this._openSearchModal('pw')}>\n                  비밀번호 찾기\n                        </b>\n              </div>\n            </div>\n          </div>\n        </Modal>\n        <Search_id\n          search_id_modal={this.state.search_id_modal}\n          _closeSearchModal={this._closeSearchModal}\n          _backSearchModal={this._backSearchModal}\n          target=\"id\"\n        />\n        <Search_pw\n          search_pw_modal={this.state.search_pw_modal}\n          _closeSearchModal={this._closeSearchModal}\n          _backSearchModal={this._backSearchModal}\n          target=\"pw\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default login;\n",["126","127"],"/Users/dongwoo/Downloads/healthkeep/src/inc/back_and_close.js",["128","129"],"import React, { Component } from 'react';\n\nclass back_and_close extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      close: \"https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2012/png/iconmonstr-x-mark-2.png&r=0&g=0&b=0\",\n      back: \"https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2012/png/iconmonstr-undo-1.png&r=0&g=0&b=0\",\n    }\n  }\n\n  _controller = (target, type) => {\n    const {\n      _resetIDResult, _resetPWResult, _backSearchModal, _closeSearchModal\n    } = this.props;\n\n    if (target === 'id') {\n      _resetIDResult();\n\n    } else if (target === 'pw') {\n      _resetPWResult();\n    }\n\n    if (type === 'back') {\n      _backSearchModal(target);\n\n    } else if (type === 'close') {\n      _closeSearchModal(target);\n    }\n  }\n\n  render() {\n    const { close, back } = this.state;\n    const { target } = this.props\n    const { _controller } = this;\n\n    return (\n      <div className='back_and_close'>\n        <div id='back_icon'>\n          <img src={back}\n            onClick={() => _controller(target, 'back')}\n          />\n        </div>\n        <div id='close_icon'>\n          <img src={close}\n            onClick={() => _controller(target, 'close')}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default back_and_close;","/Users/dongwoo/Downloads/healthkeep/src/page/signup.js",[],["130","131"],"/Users/dongwoo/Downloads/healthkeep/src/inc/search_pw.js",["132"],"import React, { Component } from 'react';\nimport Modal from 'react-awesome-modal';\n\nimport { Back_And_Close } from './index.js';\n\nimport axios from 'axios';\n\nclass search_pw extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: false,\n      secret: \"\",\n      user_data: \"\",\n      change: false,\n    }\n  }\n\n  _searchPassword = async function () {\n    const user_id = document.getElementsByName('search_pw_id')[0].value.trim();\n\n    // 이메일 구하기\n    const email_id = document.getElementsByName('search_pw_email')[0].value.trim();\n    const email_host = document.getElementsByName('search_pw_write_email')[0].value.trim();\n\n    const user_email = email_id + '@' + email_host;\n\n    // 아이디 체크\n    const id_check = /^[a-z]+[a-z0-9]{5,19}$/g;\n\n    // 이메일 체크\n    const email_check = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n\n    if (!id_check.test(user_id)) {\n      return alert('아이디는 영문자로 시작하는 6~20자여야만 합니다.')\n    }\n\n    if (email_id === \"\" || email_host === \"\") {\n      return alert('이메일을 모두 입력해주세요.');\n\n    } else if (!user_email.match(email_check)) {\n      return alert('올바른 이메일 형식을 입력해주세요.');\n    }\n\n    const obj = { user_id: user_id, user_email: user_email }\n    const res = await axios('/search/pw', {\n      method: 'POST',\n      data: obj,\n      headers: new Headers()\n    })\n\n    if (res.data === false) {\n      return alert('일치하는 데이터가 없습니다 \\n다시 확인해주세요.');\n    }\n\n    document.getElementsByName('search_pw_id')[0].value = '';\n\n    alert(res.data.result[0].email + '의 주소로 \\n6자리의 숫자코드가 수신되었습니다.');\n    return this.setState({\n      result: true,\n      secret: res.data.secret,\n      user_data: res.data.result[0]\n    })\n  }\n\n  _checkSecretCode = function () {\n    const secret_code = Number(this.state.secret);\n    const secret_input = Number(document.getElementsByName('pw_secret')[0].value.trim());\n\n    if (String(secret_input).length !== 6) {\n      return alert('6자리의 숫자코드를 입력해주세요.');\n\n    } else if (secret_code !== secret_input) {\n      return alert('숫자코드가 일치하지 않습니다.');\n    }\n\n    return this.setState({ change: true })\n  }\n\n  _changePassword = async function () {\n    const change_password = document.getElementsByName('change_password')[0].value.trim();\n    const check_change_password = document.getElementsByName('check_change_password')[0].value.trim();\n\n    // 비밀번호 확인\n    const pw_check = /^[a-z]+[a-z0-9]{5,19}$/g;\n    if (!pw_check.test(change_password)) {\n      return alert('비밀번호는 영문자로 시작하는 6~20자여야만 합니다.')\n\n    } else if (change_password !== check_change_password) {\n      return alert('비밀번호와 비밀번호 확인이 일치하지 않습니다.')\n    }\n\n    const user_id = this.state.user_data.id;\n    const obj = { user_id: user_id, change_password: change_password }\n    await axios('/update/password', {\n      method: 'POST',\n      data: obj,\n      headers: new Headers()\n    })\n\n    alert('비밀번호가 변경되었습니다.');\n    this.setState({ result: false, change: false })\n    return this.props._backSearchModal(this.props.target);\n  }\n\n  _resetPWResult = () => {\n    this.setState({ result: false, change: false })\n  }\n\n  render() {\n    const {\n      _closeSearchModal, _backSearchModal, target\n    } = this.props;\n\n    const { _resetPWResult } = this;\n    const { result, user_data, change } = this.state;\n\n    return (\n      <div>\n        <Modal visible={this.props.search_pw_modal}\n          width=\"400\" height=\"420\"\n          effect=\"fadeInDown\"\n        >\n          <Back_And_Close\n            _closeSearchModal={_closeSearchModal}\n            _backSearchModal={_backSearchModal}\n            _resetPWResult={_resetPWResult}\n            target={target}\n          />\n          {!result ?\n            <div className='Search_div'>\n              <h4> 비밀번호 찾기 </h4>\n\n              <div>\n                <h5> 아이디 </h5>\n                <input type='text' maxLength='15' name='search_pw_id' />\n              </div>\n\n              <div>\n                <h5> 이메일 </h5>\n                <input type='text' maxLength='20' name='search_pw_email' />\n\n                <div id='search_id_email_div'>\n                  @\n                    <input type='text' maxLength='15' name='search_pw_write_email' />\n                </div>\n              </div>\n\n              <div>\n                <input type='button' value='조회하기' name='search_pw_submit'\n                  onClick={() => this._searchPassword()}\n                />\n              </div>\n            </div>\n\n            :\n            !change ?\n              <div className='search_result_div'>\n                <h4> 비밀번호 찾기 </h4>\n\n                <div>\n                  <p> <b> {user_data.email} </b> 이메일 주소로 <br />전송된 6자리 숫자코드를 입력해주세요. </p>\n                  <input type='text' maxLength='6' name='pw_secret'\n                    placeholder='6자리 숫자코드 입력' />\n                  <input type='button' value='확인' name='pw_secret_submit'\n                    onClick={() => this._checkSecretCode()}\n                  />\n                </div>\n              </div>\n\n              :\n              <div className='change_password_div'>\n                <h4> 비밀번호 변경 </h4>\n\n                <div>\n                  <span>\n                    변경하려는 비밀번호를 입력해주세요.\n                        <p> ( 영문자로 시작해 영문 또는 숫자로 6~20자 입력 )</p>\n                  </span>\n\n                  <div>\n                    <h5> 비밀번호 </h5>\n                    <input type='password' name='change_password' maxLength='20' />\n                  </div>\n\n                  <div>\n                    <h5> 비밀번호 확인 </h5>\n                    <input type='password' name='check_change_password' maxLength='20' />\n                  </div>\n\n                  <input type='button' value='비밀번호 변경' name='change_password_submit'\n                    onClick={() => this._changePassword()}\n                  />\n                </div>\n              </div>\n          }\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default search_pw;","/Users/dongwoo/Downloads/healthkeep/src/inc/search_id.js",["133"],"import React, { Component } from 'react';\nimport Modal from 'react-awesome-modal';\n\nimport axios from 'axios';\n\nimport { Back_And_Close } from './index.js';\n\nclass search_id extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: false,\n    }\n  }\n\n  _searchUserID = async function () {\n    const user_name = document.getElementsByName('search_id_name')[0].value.trim();\n    const user_birthday = Number(document.getElementsByName('search_id_birthday')[0].value.trim());\n    const user_sex = Number(document.getElementsByName('search_id_sex')[0].value.trim());\n\n    const email_id = document.getElementsByName('search_id_email')[0].value.trim();\n    const email_host = document.getElementsByName('search_id_write_email')[0].value.trim();\n\n    const user_email = email_id + '@' + email_host;\n\n    // 이메일 체크\n    const email_check = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n\n    if (user_name === \"\" || user_name.length < 1) {\n      return alert('이름을 작성해주세요.');\n\n    } else if (user_name.length < 2) {\n      return alert('이름은 최소 2글자 이상이여야 합니다.');\n    }\n\n    if (user_birthday === 0 || user_sex === 0) {\n      return alert('생년월일을 모두 입력해주세요.');\n\n    } else if (isNaN(user_birthday) || isNaN(user_sex)) {\n      return alert('생년월일은 숫자만 입력해주세요.');\n    }\n\n    if (email_id === \"\" || email_host === \"\") {\n      return alert('이메일을 모두 입력해주세요.');\n\n    } else if (!user_email.match(email_check)) {\n      return alert('올바른 이메일 형식을 입력해주세요.');\n    }\n\n    const obj = {\n      user_name: user_name,\n      user_birthday: user_birthday,\n      user_sex: user_sex,\n      user_email: user_email\n    }\n\n    const res = await axios('/search/id', {\n      method: 'POST',\n      data: obj,\n      headers: new Headers()\n    })\n\n    if (res.data.length === 0) {\n      return alert('일치하는 데이터가 없습니다 \\n다시 확인해주세요.');\n    }\n    this.setState({ result: res.data })\n  }\n\n  _resetIDResult = () => {\n    this.setState({ result: false })\n  }\n\n  _resetBack = () => {\n    const { _backSearchModal, target } = this.props;\n    this._resetIDResult();\n\n    return _backSearchModal(target)\n  }\n\n  render() {\n    const {\n      _closeSearchModal, _backSearchModal, target\n    } = this.props;\n\n    const { result } = this.state;\n    return (\n      <div>\n        <Modal visible={this.props.search_id_modal}\n          width=\"400\" height=\"480\"\n          effect=\"fadeInDown\"\n        >\n          <Back_And_Close\n            _closeSearchModal={_closeSearchModal}\n            _backSearchModal={_backSearchModal}\n            _resetIDResult={this._resetIDResult}\n            target={target}\n          />\n          {!result ? // 아이디 조회 전\n            <div className='Search_div'>\n              <h4> 아이디 찾기 </h4>\n\n              <div>\n                <h5> 이름 </h5>\n                <input type='text' maxLength='15' name='search_id_name' />\n              </div>\n\n              <div>\n                <h5> 생년월일 </h5>\n                <input type='text' maxLength='6' name='search_id_birthday' /> -\n                  <input type='text' maxLength='1' name='search_id_sex' /> ******\n                </div>\n\n              <div>\n                <h5> 이메일 </h5>\n                <input type='text' maxLength='20' name='search_id_email' />\n\n                <div id='search_id_email_div'>\n                  @\n                    <input type='text' maxLength='15' name='search_id_write_email' />\n                </div>\n              </div>\n\n              <div>\n                <input type='button' value='조회하기' name='search_id_submit'\n                  onClick={() => this._searchUserID()}\n                />\n              </div>\n\n            </div>\n\n            : // 아이디를 조회한 경우\n            <div>\n              <h4> 아이디 찾기 </h4>\n\n              <div className='Search_id_result'>\n                <p> 아래의 회원 정보를 찾았습니다. </p>\n\n                <div className='Search_id_result_div'>\n                  <div>\n                    <h5> 아이디 </h5>\n                    {result[0].id}\n                  </div>\n\n                  <div>\n                    <h5> 가입일 </h5>\n                    {result[0].signup_date.slice(0, 10)}\n                  </div>\n                </div>\n\n                <div>\n                  <input type='button' value='돌아가기' name='search_id_back'\n                    onClick={() => this._resetBack()}\n                  />\n                </div>\n              </div>\n            </div>\n          }\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default search_id;",["134","135"],"/Users/dongwoo/Downloads/healthkeep/src/inc/ckeditor.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":30,"column":7,"nodeType":"142","messageId":"143","endLine":30,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":288,"column":18,"nodeType":"146","messageId":"147","endLine":288,"endColumn":28,"fix":"148"},{"ruleId":"149","severity":1,"message":"150","line":288,"column":18,"nodeType":"146","messageId":"151","endLine":288,"endColumn":28},{"ruleId":"136","replacedBy":"152"},{"ruleId":"138","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":7,"column":3,"nodeType":"156","messageId":"157","endLine":9,"endColumn":4},{"ruleId":"136","replacedBy":"158"},{"ruleId":"138","replacedBy":"159"},{"ruleId":"136","replacedBy":"160"},{"ruleId":"138","replacedBy":"161"},{"ruleId":"154","severity":1,"message":"155","line":5,"column":3,"nodeType":"156","messageId":"157","endLine":7,"endColumn":4},{"ruleId":"144","severity":1,"message":"145","line":241,"column":25,"nodeType":"146","messageId":"147","endLine":241,"endColumn":35,"fix":"162"},{"ruleId":"149","severity":1,"message":"150","line":241,"column":25,"nodeType":"146","messageId":"151","endLine":241,"endColumn":35},{"ruleId":"163","severity":1,"message":"164","line":334,"column":17,"nodeType":"165","endLine":337,"endColumn":65},{"ruleId":"163","severity":1,"message":"164","line":350,"column":17,"nodeType":"165","endLine":350,"endColumn":96},{"ruleId":"163","severity":1,"message":"164","line":358,"column":17,"nodeType":"165","endLine":361,"endColumn":66},{"ruleId":"163","severity":1,"message":"164","line":440,"column":31,"nodeType":"165","endLine":442,"endColumn":33},{"ruleId":"163","severity":1,"message":"164","line":462,"column":31,"nodeType":"165","endLine":464,"endColumn":33},{"ruleId":"163","severity":1,"message":"164","line":127,"column":21,"nodeType":"165","endLine":131,"endColumn":23},{"ruleId":"163","severity":1,"message":"164","line":133,"column":21,"nodeType":"165","endLine":137,"endColumn":23},{"ruleId":"163","severity":1,"message":"164","line":109,"column":13,"nodeType":"165","endLine":109,"endColumn":107},{"ruleId":"166","severity":1,"message":"167","line":145,"column":9,"nodeType":"165","endLine":150,"endColumn":11},{"ruleId":"166","severity":1,"message":"168","line":151,"column":9,"nodeType":"165","endLine":156,"endColumn":11},{"ruleId":"136","replacedBy":"169"},{"ruleId":"138","replacedBy":"170"},{"ruleId":"163","severity":1,"message":"164","line":40,"column":11,"nodeType":"165","endLine":42,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":45,"column":11,"nodeType":"165","endLine":47,"endColumn":13},{"ruleId":"136","replacedBy":"171"},{"ruleId":"138","replacedBy":"172"},{"ruleId":"166","severity":1,"message":"173","line":124,"column":11,"nodeType":"165","endLine":129,"endColumn":13},{"ruleId":"166","severity":1,"message":"173","line":92,"column":11,"nodeType":"165","endLine":97,"endColumn":13},{"ruleId":"136","replacedBy":"174"},{"ruleId":"138","replacedBy":"175"},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"no-dupe-keys","Duplicate key 'like_num'.","ObjectExpression","unexpected","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"178","text":"179"},"no-new-object","The object literal notation {} is preferrable.","preferLiteral",["176"],["177"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["176"],["177"],["176"],["177"],{"range":"180","text":"179"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Search_id must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Search_pw must be in PascalCase or SCREAMING_SNAKE_CASE",["176"],["177"],["176"],["177"],"Imported JSX component Back_And_Close must be in PascalCase or SCREAMING_SNAKE_CASE",["176"],["177"],"no-global-assign","no-unsafe-negation",[6869,6869],"()",[5898,5898]]